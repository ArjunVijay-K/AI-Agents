import { defineStore } from 'pinia';
import axios from 'axios'; // We'll need axios to make API calls

// Define the backend API URL
const API_BASE_URL = 'http://localhost:8000'; // As per our backend setup

export const useDocumentsStore = defineStore('documents', {
  state: () => ({
    resumeFile: null,
    jobDescription: '',
    uploadedResumeText: '',
    uploadedJobDescriptionText: '',
    isLoading: false,
    error: null,
    successMessage: '',
    generatedQuestions: [], // To store questions from the backend
  }),
  actions: {
    setResumeFile(file) {
      this.resumeFile = file;
      this.error = null; // Clear previous errors
      this.successMessage = '';
    },
    setJobDescription(text) {
      this.jobDescription = text;
      this.error = null; // Clear previous errors
      this.successMessage = '';
    },
    async uploadAndProcessDocuments() {
      if (!this.resumeFile || !this.jobDescription.trim()) {
        this.error = 'Both resume and job description are required.';
        return false;
      }
      this.isLoading = true;
      this.error = null;
      this.successMessage = '';
      this.generatedQuestions = [];

      const formData = new FormData();
      formData.append('resume', this.resumeFile);
      formData.append('job_description', this.jobDescription);

      try {
        const response = await axios.post(`${API_BASE_URL}/upload/`, formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });

        if (response.data && response.data.message) {
          this.uploadedResumeText = response.data.resume_text; // Assuming backend returns this
          this.uploadedJobDescriptionText = response.data.job_description_text; // Assuming backend returns this
          this.successMessage = response.data.message; // Keep it simple here

          // Call action to generate questions
          const questionsGenerated = await this.fetchGeneratedQuestions({
            resume_text: this.uploadedResumeText,
            job_description_text: this.uploadedJobDescriptionText,
            message: "Processed data for question generation"
          });

          return questionsGenerated; // Return true if questions were generated
        } else {
          this.error = "Received an unexpected response from the server during upload.";
          return false;
        }
      } catch (err) {
        if (err.response && err.response.data && err.response.data.detail) {
          this.error = `Upload Error: ${err.response.data.detail}`;
        } else if (err.request) {
          this.error = 'Upload Error: No response from server. Is the backend running?';
        } else {
          this.error = `Upload Error: ${err.message}`;
        }
        return false;
      } finally {
        this.isLoading = false;
      }
    },

    async fetchGeneratedQuestions(processedDocsPayload) {
      this.isLoading = true;
      this.error = null; // Clear previous errors related to question generation
      // this.successMessage = ''; // Keep success message from upload if any

      try {
        const response = await axios.post(`${API_BASE_URL}/generate-questions/`, processedDocsPayload);
        if (response.data && Array.isArray(response.data)) {
          this.generatedQuestions = response.data;
          if (this.generatedQuestions.length > 0) {
            this.successMessage = "Interview questions generated successfully! You can now start the mock interview.";
            return true; // Indicate success
          } else {
            this.successMessage = "Documents processed, but no questions were generated by the backend.";
            return false; // Indicate that no questions came back
          }
        } else {
          this.error = "Received an unexpected response when fetching questions.";
          return false;
        }
      } catch (err) {
         if (err.response && err.response.data && err.response.data.detail) {
          this.error = `Question Generation Error: ${err.response.data.detail}`;
        } else if (err.request) {
          this.error = 'Question Generation Error: No response from server.';
        } else {
          this.error = `Question Generation Error: ${err.message}`;
        }
        return false;
      } finally {
        this.isLoading = false;
      }
    },

    clearData() {
      this.resumeFile = null;
      this.jobDescription = '';
      this.uploadedResumeText = '';
      this.uploadedJobDescriptionText = '';
      this.isLoading = false;
      this.error = null;
      this.successMessage = '';
      this.generatedQuestions = [];
    }
  },
});
